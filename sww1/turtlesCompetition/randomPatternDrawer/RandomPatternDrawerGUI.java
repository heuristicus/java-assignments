/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RandomPatternDrawerGUI.java
 *
 * Created on 26-Nov-2009, 16:33:45
 */

package randomPatternDrawer;

import javax.swing.*;

/**
 *
 * @author Michal
 */
public class RandomPatternDrawerGUI extends javax.swing.JFrame {

    /** Creates new form RandomPatternDrawerGUI */
    public RandomPatternDrawerGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seedVal = new javax.swing.JLabel();
        seedInput = new javax.swing.JTextField();
        moveLengthInput = new javax.swing.JTextField();
        moveLength = new javax.swing.JLabel();
        minMoveInput = new javax.swing.JTextField();
        minMoveBox = new javax.swing.JLabel();
        recurseInput = new javax.swing.JTextField();
        recursePerMove = new javax.swing.JLabel();
        recurseRandom = new javax.swing.JCheckBox();
        allRandom = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        seedVal.setText("Seed Value");

        seedInput.setToolTipText("This value is used to influence various things such as move distance,");

        moveLengthInput.setToolTipText("This value is used to influence various things such as move distance,");

        moveLength.setText("Move Length");

        minMoveInput.setToolTipText("This value is used to influence various things such as move distance,");

        minMoveBox.setText("Minimum Move Length");

        recurseInput.setToolTipText("This value is used to influence various things such as move distance,");

        recursePerMove.setText("Number of Recursions per move");

        recurseRandom.setText("Random number");

        allRandom.setText("Everything Random");
        allRandom.setToolTipText("May not produce the best results, and will probably run very slowly.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(moveLength)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(moveLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(seedVal)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(seedInput, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(minMoveBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(minMoveInput, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(recursePerMove)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(recurseRandom)
                                .addComponent(recurseInput))))
                    .addComponent(allRandom))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(allRandom)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seedVal)
                    .addComponent(seedInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moveLength)
                    .addComponent(moveLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minMoveBox)
                    .addComponent(minMoveInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recurseInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recursePerMove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recurseRandom)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RandomPatternDrawerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allRandom;
    private javax.swing.JLabel minMoveBox;
    private javax.swing.JTextField minMoveInput;
    private javax.swing.JLabel moveLength;
    private javax.swing.JTextField moveLengthInput;
    private javax.swing.JTextField recurseInput;
    private javax.swing.JLabel recursePerMove;
    private javax.swing.JCheckBox recurseRandom;
    private javax.swing.JTextField seedInput;
    private javax.swing.JLabel seedVal;
    // End of variables declaration//GEN-END:variables


}
